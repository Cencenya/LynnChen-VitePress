import{_ as a,c as e,o as t,aa as o}from"./chunks/framework.CAVwB9kQ.js";const c="/Lyc-notes/assets/%E7%AC%AC3%E7%AB%A0%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6.Bro3Bs0e.png",S=JSON.parse('{"title":"栈、队列和数组","description":"","frontmatter":{},"headers":[],"relativePath":"dataStructure/chapter3.md","filePath":"dataStructure/chapter3.md","lastUpdated":1717066388000}'),r={name:"dataStructure/chapter3.md"},s=o('<h1 id="栈、队列和数组" tabindex="-1">栈、队列和数组 <a class="header-anchor" href="#栈、队列和数组" aria-label="Permalink to &quot;栈、队列和数组&quot;">​</a></h1><p><strong>知识框架</strong></p><p><img src="'+c+'" alt="alt text"></p><h2 id="栈" tabindex="-1">栈 <a class="header-anchor" href="#栈" aria-label="Permalink to &quot;栈&quot;">​</a></h2><h4 id="栈的基本概念" tabindex="-1">栈的基本概念 <a class="header-anchor" href="#栈的基本概念" aria-label="Permalink to &quot;栈的基本概念&quot;">​</a></h4><ol><li><p>栈的定义 <code>栈(Stack)</code>是只允许在一端进行插入或删除操作的<strong>线性表</strong>。操作特性概括为<code>后进先出（LIFO）</code></p></li><li><p>栈的基本操作</p></li></ol><p>• <code>Initstack(&amp;S)</code>:初始化一个空栈 S。 • <code>StackEmpty(S)</code>:判断一个栈是否为空，若栈 s 为空则返回 true，否则返回 false。 • <code>Push(&amp;S，x)</code>:进栈，若栈 s 未满，则将 x 加入使之成为新栈顶。 • <code>Pop(&amp;S，&amp;x)</code>:出栈，若栈 s 非空，则弹出栈项元素，并用 x 返回。 • <code>Get Top (S，&amp;x)</code>:读栈顶元素，但不出栈，若栈 S 非空，则用 x 返回栈项元素。 • <code>Destroystack(&amp;S)</code>:销毁栈，并释放栈 S 占用的存储空间(“&amp;” 表示引用调用)</p><p>栈的数学性质：当 n 个不同元素进栈时，出栈元素不同排列的个数为 （1 / n+1）C（n 2n）,这个公式称 为 <code>卡特兰数(Catalan)</code>公式，</p>',8),d=[s];function n(p,i,l,_,h,m){return t(),e("div",null,d)}const x=a(r,[["render",n]]);export{S as __pageData,x as default};
