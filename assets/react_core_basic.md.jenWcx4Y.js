import{_ as e,c as o,o as c,aa as t}from"./chunks/framework.CAVwB9kQ.js";const r="/Lyc-notes/assets/core-packages.c2850581.BzQQ1b2U.png",h=JSON.parse('{"title":"核心概念","description":"","frontmatter":{},"headers":[],"relativePath":"react/core/basic.md","filePath":"react/core/basic.md","lastUpdated":1714221256000}'),a={name:"react/core/basic.md"},n=t('<h1 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h1><h2 id="核心包结构" tabindex="-1">核心包结构 <a class="header-anchor" href="#核心包结构" aria-label="Permalink to &quot;核心包结构&quot;">​</a></h2><ol><li><p><strong>react</strong></p><blockquote><p>react基础包，提供创建react组件（<code>React.createElement</code>）、状态管理（<code>useState</code>）、生命周期（<code>useEffect</code>）等必要函数，开发过程中的使用的api主要都来自这个包。</p></blockquote></li><li><p><strong>react-dom</strong></p><blockquote><p>web 应用的<strong>渲染器</strong>，是 react 与 web 平台连接的桥梁(可以在浏览器和 nodejs 环境中使用)，将<code>react-reconciler</code>中的运行结果输出到 web 界面上，主要作用是将 React 组件转换为 DOM 节点，并渲染在浏览器上。在 React 18 中，更推荐使用的渲染 api 是 <code>createRoot.render</code>，在 concurrent 模式（并发模式）下性能更好。</p></blockquote></li><li><p><strong>react-reconciler</strong></p><blockquote><p>react 的核心包（<strong>构造器</strong>），通过实现协调算法（<code>diff 算法</code>）管理 react 应用状态的输入和结果的输出，构造fiber树， 将输入信号最终转换成输出信号传递给<strong>渲染器</strong>（<code>react-dom</code>）。主要功能作用：</p><ul><li>接受状态输入(<code>scheduleUpdateOnFiber</code>)，将fiber树生成逻辑封装到一个回调函数中(涉及fiber树形结构, fiber.updateQueue队列, 调和算法等)</li><li>把此回调函数(<code>performSyncWorkOnRoot</code>或<code>performConcurrentWorkOnRoot</code>)送入<code>scheduler</code>进行调度</li><li>回调函数执行完成后获取到更新结果，交给<strong>渲染器</strong>（<code>react-dom</code>）渲染到页面上</li></ul></blockquote></li><li><p><strong>scheduler</strong></p><blockquote><p>调度机制的核心实现(<strong>调度器</strong>)，接收<strong>react-reconciler</strong>传入的回调函数任务，并管理这些任务的优先级和执行顺序。</p><ul><li>核心任务就是执行回调(回调函数由<code>react-reconciler</code>提供)</li><li>控制由<code>react-reconciler</code>送入的回调函数的执行时机, 在concurrent模式下可以实现任务分片, 实现可中断渲染(concurrent模式下才有此特性)</li></ul></blockquote></li></ol><h2 id="架构分层" tabindex="-1">架构分层 <a class="header-anchor" href="#架构分层" aria-label="Permalink to &quot;架构分层&quot;">​</a></h2><p>可将react应用整体结构分为接口层（<code>api</code>）和内核层（<code>core</code>）</p><ol><li><p><strong>接口层（api）</strong> react包对外暴露api</p></li><li><p><strong>内核层</strong> 由三部分组成，调度器（<code>scheduler</code>），构造器（<code>react-reconciler</code>），渲染器（<code>react-dom</code>）</p></li></ol><p><strong>内核关系</strong><img src="'+r+'" alt="alt text"></p>',7),d=[n];function l(s,i,p,u,g,_){return c(),o("div",null,d)}const f=e(a,[["render",l]]);export{h as __pageData,f as default};
