import{_ as s,c as i,o as a,aa as n}from"./chunks/framework.CAVwB9kQ.js";const t="/Lyc-notes/assets/%E7%AC%AC%E4%B8%83%E7%AB%A0%E6%A6%82%E8%BF%B0.Bpq3KyCw.png",l="/Lyc-notes/assets/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE%E8%B7%AF%E5%BE%84.CXHdr3B1.png",p="/Lyc-notes/assets/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE%E5%88%A4%E5%AE%9A%E6%A0%91.LW7xJkGT.png",h="/Lyc-notes/assets/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE%E5%88%86%E6%9E%90.CWq86ekh.png",e="/Lyc-notes/assets/%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE.o2NdByjJ.png",k="/Lyc-notes/assets/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91.BDcmxjYc.png",r="/Lyc-notes/assets/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5.DZ7J19Px.png",E="/Lyc-notes/assets/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0.BDFIBJmd.png",o="/Lyc-notes/assets/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E7%9A%84%E5%88%A0%E9%99%A4.DFfiYiy-.png",g="/Lyc-notes/assets/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E7%9A%84%E6%9F%A5%E6%89%BE%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90.zsx_vMOv.png",d="/Lyc-notes/assets/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89.CszM-K0f.png",c="/Lyc-notes/assets/%E6%9C%80%E5%B0%8F%E4%B8%8D%E5%B9%B3%E8%A1%A1%E5%AD%90%E6%A0%91._Nk_bjmz.png",y="/Lyc-notes/assets/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E8%B0%83%E6%95%B4.CG7h1fgb.png",A="/Lyc-notes/assets/%E6%9E%84%E9%80%A0%E5%B9%B3%E8%A1%A1%E5%8F%89%E6%A0%91.DWuWkGmk.png",m="/Lyc-notes/assets/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%A0%E9%99%A4.C3ZWbTch.png",F="/Lyc-notes/assets/b%E6%A0%91.ZZOTY4yg.png",B="/Lyc-notes/assets/b%E6%A0%91%E9%AB%98%E5%BA%A6%E5%88%86%E6%9E%90.UstdFlQw.png",b="/Lyc-notes/assets/b%E6%A0%91%E6%8F%92%E5%85%A5.CsRliA3u.png",u="/Lyc-notes/assets/B%E6%A0%91%E7%9A%84%E5%88%A0%E9%99%A4.CeaCumIz.png",_="/Lyc-notes/assets/b_%E6%A0%91.KwT2ue2B.png",N=JSON.parse('{"title":"第 7 章 查找","description":"","frontmatter":{},"headers":[],"relativePath":"dataStructure/chapter7.md","filePath":"dataStructure/chapter7.md","lastUpdated":1719313031000}'),D={name:"dataStructure/chapter7.md"},C=n('<h1 id="第-7-章-查找" tabindex="-1">第 7 章 查找 <a class="header-anchor" href="#第-7-章-查找" aria-label="Permalink to &quot;第 7 章 查找&quot;">​</a></h1><p><img src="'+t+`" alt="alt text"></p><h2 id="查找的基本概念" tabindex="-1">查找的基本概念 <a class="header-anchor" href="#查找的基本概念" aria-label="Permalink to &quot;查找的基本概念&quot;">​</a></h2><p>（1）<strong>查找</strong> （2）<strong>查找表</strong> （3）<strong>静态查找表&amp;动态查找表</strong>：若一个查找表的操作只涉及查找操作，则无须动态地修改查找表，此类查找表称为静态查找表。与此对应，需要动态地插入或删除的查找表称为动态查找表。适合静态查找表的查找方法有顺序查找、折半查找、散列查找等;适合动态查找表的查找方法有二叉排序树的查找、散列查找等 （4）<strong>关键字</strong> （5）<strong>平均查找长度</strong>：一次查找的长度是指需要比较的关键字次数，而平均查找长度则是所有查找过程中进行关键字的比较次数的平均值</p><h2 id="顺序查找和折半查找" tabindex="-1">顺序查找和折半查找 <a class="header-anchor" href="#顺序查找和折半查找" aria-label="Permalink to &quot;顺序查找和折半查找&quot;">​</a></h2><h4 id="顺序查找" tabindex="-1">顺序查找 <a class="header-anchor" href="#顺序查找" aria-label="Permalink to &quot;顺序查找&quot;">​</a></h4><p>顺序查找又称线性查找，它对顺序表和链表都是适用的。对于顺序表，可通过数组下标递增 来顺序扫描每个元素:对于链表，可通过指针 next 来依次扫描每个元素。顺序查找通常分为对一般的无序线性表的顺序查找和对按关键字有序的线性表的顺序查找</p><ol><li><p><strong>一般线性表的顺序查找</strong></p></li><li><p><strong>有序线性表的顺序查找</strong></p></li></ol><h4 id="折半查找" tabindex="-1">折半查找 <a class="header-anchor" href="#折半查找" aria-label="Permalink to &quot;折半查找&quot;">​</a></h4><p><strong>折半查找又称二分查找，它仅适用于有序的顺序表</strong></p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Binary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SSTable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , ElemType </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> low </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, high </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> L.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,mid;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(low </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hight){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (low </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hight) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> L.elem[mid]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> L.elem[mid]) hight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> L.elem[mid]) low </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>当折半查找算法选取中间结点时，既可以采用向下取整，又可以采用向上取整。但每次查找 的取整方式必须相同.</p><p><strong>折半查找路径</strong><img src="`+l+'" alt="alt text"></p><p><strong>折半查找判定树</strong> 折半查找的过程可用图 7.2 所示的二叉树来描述，称为判定树。树中每个圆形结点表示一个记录，结点中的值为该记录的关键字值:树中最下面的叶结点都是方形的，它表示查找失败的区间。从判定树可以看出，查找成功时的查找长度为从根结点到目的结点的路径上的结点数，而查找失败时的查找长度为从根结点到对应失败结点的父结点的路径上的结点数;每个结点值均大于其左子结点值，且均小于其右子结点值。若有序序列有 n 个元素，则对应的判定树有 n 个圆形的非叶结点和 n+1 个方形的叶结点。显然，判定树是<strong>一棵平衡二叉树</strong>。 <img src="'+p+'" alt="alt text"></p><p><img src="'+h+'" alt="alt text"></p><h4 id="分块查找" tabindex="-1">分块查找 <a class="header-anchor" href="#分块查找" aria-label="Permalink to &quot;分块查找&quot;">​</a></h4><p>分块查找又称索<strong>引顺序查找</strong>，它吸取了顺序查找和折半查找各自的优点，既有动态结构，又适于快速查找。</p><p><strong>基本思想</strong>：将查找表分为若干子块。块内的元素可以无序，但块间的元素是有序的，即第一个块中的最大关键字小于第二个块中的所有记录的关键字，第二个块中的最大关键小于第三个块中的所有记录的关键字，以此类推。再建立一个索引表，索引表中的每个元素含有各块的最大关键字和各块中的第 一个元素的地址，索引表按关键字有序排列。（块内无序，块间有序）</p><p><strong>分块查找的过程分为两步</strong>:第一步是在索引表中确定待查记录所在的块，可以顺序查找或折 半查找索引表;第 二步是在块内顺序查找。（块间折半，块内顺序）</p><p><img src="'+e+'" alt="alt text"></p><h2 id="树的查找" tabindex="-1">树的查找 <a class="header-anchor" href="#树的查找" aria-label="Permalink to &quot;树的查找&quot;">​</a></h2><h4 id="二叉排序树" tabindex="-1">二叉排序树 <a class="header-anchor" href="#二叉排序树" aria-label="Permalink to &quot;二叉排序树&quot;">​</a></h4><p>构造一棵二叉排序树的目的并不是排序，而是提高查找、插入和删除关键字的速度，二叉排序树这种非线性结构也有利于插入和删除的实现。</p><ol><li><p><strong>二叉排序树的定义</strong> 二叉排序树 (也称 二叉查找树)或者是 一棵空树，或者是具有下列特性的 二叉树: 1️⃣ 若左子树非空，则左子树上所有结点的值均小于根结点的值。 2️⃣ 若右子树非空，则右子树 上所有结点的值均大于根结点的值。 3️⃣ 左、右子树也分别是一棵二叉排序树 。 根据二叉排序树的定义，左子树结点值 &lt;根结点值 &lt;右子树结点值，因此对二叉排序树 进行中序遍历，可以得到一个递增的有序序列。例如，图 7. 4 所示 二叉排序树的中序遍历序列 为 123468。 <img src="'+k+`" alt="alt text"></p></li><li><p><strong>二叉排序树的查找</strong></p></li></ol><p>二叉排序树的查找是从根结点开始，沿某个分支逐层向下比较的过程。若二叉排序树非空， 先将给定值与根结点的关键字比较，若相等，则查找成功;若不等，若小于根结点的关键字，则 在根结点的左子树上查找，否则在根结点的右子树上查找。这显然是一个递归的过程。</p><p>非递归：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BSTNode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BST_Search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BiTree </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , ElemType </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T-&gt;data){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T-&gt;data) T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T-&gt;lchild;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T-&gt;rchild;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="3"><li><strong>二叉排序树的插入</strong></li></ol><p>二叉排序树作为一种动态树表，其特点是树的结构通常不是一次生成的，而是在查找过程中， 当树中不存在关键字值等于给定值的结点时再进行插入的。</p><p><img src="`+r+`" alt="alt text"></p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BST_Insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BiTree </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , KeyType </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (BiTree)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BSTNode));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    T-&gt;data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    T-&gt;lchild </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T-&gt;rchild </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(K </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T-&gt;data) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T-&gt;data) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BST_Insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T-&gt;lchild,k)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BST_Insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T-&gt;rchild,k)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="4"><li><strong>二叉排序树的构造</strong></li></ol><p><img src="`+E+'" alt="alt text"></p><ol start="5"><li><strong>二叉排序树的删除</strong><img src="'+o+'" alt="alt text"></li></ol><blockquote><p>思考:若在 二叉排序树中删除并插入某结点，得到的 二叉排序树是否和原来的相同</p></blockquote><ol start="6"><li><strong>二叉排序树的查找效率分析</strong></li></ol><p>二又排序树的查找效率，主要取决于树的高度。若二叉排序树的左、右子树的高度之差的绝对值不超过 1(平衡二叉树，下一节)，它的平均查找长度为 O(log2n)。若二叉排序树是一个只有右(左)孩子的单支树(类似于有序的单链表)，则其平均查找长度为 O(n)。 <img src="'+g+'" alt="alt text"></p><p>就维护表的有序性而言，二叉排序树无须移动结点，只需修改指针即可完成插入和删除操作，平均执行时间为 O(log2n)。二分查找的对象是有序顺序表，若有插入和删除结点的操作，所花的代价是 O(n)。<strong>当有序表是静态查找表时，宜用顺序表作为其存储结构，而采用二分查找实现其找操作;若有序表是动态查找表，则应选择二叉排序树作为其逻辑结构</strong>。</p><h4 id="平衡二叉树" tabindex="-1">平衡二叉树 <a class="header-anchor" href="#平衡二叉树" aria-label="Permalink to &quot;平衡二叉树&quot;">​</a></h4><ol><li><strong>平衡二叉树的定义</strong> 为了避免树的高度增长过快，降低二叉排序树的性能，规定在插入和删除结点时，要保证任意结点的左、右子树高度差的绝对值不超过 1，将这样的二叉树称为<strong>平衡二叉树(BalancedBinaryTree)</strong>，也称<strong>AVL 树</strong>。定义结点左子树与右子树的高度差为该结点的平衡因子，则平衡二叉树结点的平衡因子的值只可能是 -1、0 或 1 。</li></ol><p><img src="'+d+'" alt="alt text"></p><ol start="2"><li><strong>平衡二叉树的插入</strong></li></ol><p>每当在二叉排序树中插入(或删除)一个结点时，首先检查其插入路径上的结点是否因为此次操作而导致了不平衡。若导致了不平衡，则<strong>先找到插入路径上离插入结点最近的平衡因子的绝对值大于 1 的结点 A</strong>，再对以 A 为根的子树，在保持二叉排序树特性的前提下，调整各结点的位置关系，使之重新达到平衡。</p><p><img src="'+c+'" alt="alt text"></p><blockquote><p>平 衡 二 叉 树 的 插 入 及 调 整 操 作 的 实 例</p></blockquote><p><img src="'+y+'" alt="alt text"></p><blockquote><p>构造平衡叉树的过程(2013)</p></blockquote><p><img src="'+A+'" alt="alt text"></p><ol start="3"><li><strong>平衡二叉树的删除</strong></li></ol><p><img src="'+m+'" alt="alt text"></p><ol start="4"><li><strong>平衡二叉树的查找</strong> 在平衡二又树上进行查找的过程与二又排序树的相同。因此，在查找过程中，进行关键字的比较次数不超过树的深度。含有 n 个结点的平衡二又树的最大深度为<code>O(log2n)</code>，因此平均查找效率为<code>O(log2n)</code>。</li></ol><h4 id="红黑树" tabindex="-1">红黑树 <a class="header-anchor" href="#红黑树" aria-label="Permalink to &quot;红黑树&quot;">​</a></h4><ol><li><strong>红黑树的定义</strong> 首先它是一颗平衡二叉树 1️⃣ 根叶黑 2️⃣ 不红红 3️⃣ 黑路同</li></ol><h2 id="b-树和-b-树" tabindex="-1">B 树和 B+树 <a class="header-anchor" href="#b-树和-b-树" aria-label="Permalink to &quot;B 树和 B+树&quot;">​</a></h2><h4 id="b-树及其基本操作" tabindex="-1">B 树及其基本操作 <a class="header-anchor" href="#b-树及其基本操作" aria-label="Permalink to &quot;B 树及其基本操作&quot;">​</a></h4><p>所谓 m 阶 B 树是所有结点的平衡因子均等于 0 的<strong>m 路平衡查找树</strong>。</p><ol><li><strong>B 树的定义和特点</strong> 一棵 m 阶 B 树或为空树，或为满足如下特性的 m 叉树:</li></ol><ul><li>树中每个结点至多有 m 棵子树，即至多有 m- 1 个关键字。</li><li>若根结点不是叶结点，则至少有 2 棵子树，即至少有 1 个关键字。</li><li>除根结点外的所有非叶结点至少有<code>(m/2)向上取整</code>棵子树，即至少有<code>（m/2）向上取整-1</code> 个关键字</li><li>所有的叶结点都出现在同一层次上，并且不带信息(可以视为外部结点或类似于折半查 找判定树的失败结点，实际上这些结点并不存在，指向这些结点的指针为空)。</li><li><code>（m/2）向上取整-1 &lt;= n &lt;= m-1</code></li></ul><ol start="2"><li><p><strong>B 树中关键字数和结点数的分析</strong><img src="'+F+'" alt="alt text"></p></li><li><p><strong>B 树的查找</strong> B 树的查找包含两个基本操作:1️⃣ 在 B 树中找结点:2️⃣ 在结点内找关键字。由于 B 树常存储在磁盘上，则前一查找操作是在磁盘上进行的，而后一查找操作是在内存中进行的，即在磁盘上找到目标结点后，先将结点信息读入内存，然后再采用顺序查找法或折半查找法。因此，在磁盘上进行查找的次数即目标结点在 B 树上的层次数，决定了 B 树的查找效率。</p></li><li><p><strong>B 树的高度（磁盘存取次数）</strong> B 树中的大部分操作所需的磁盘存取次数与 B 树的高度成正比。 下面来分析 B 树在不同情况 下的高度。当然，首先应该明确 B 树的高度不包括最后的不带任 何信息的叶结点所处的那一层(有些书对 B 树的高度的定义中，包含最后的那一层)。 <img src="'+B+'" alt="alt text"></p></li><li><p><strong>B 树的插入</strong></p></li></ol><p><img src="'+b+'" alt="alt text"></p><ol start="6"><li><strong>B 树的删除</strong></li></ol><p><img src="'+u+'" alt="alt text"></p><h4 id="b-树的基本概念" tabindex="-1">B+树的基本概念 <a class="header-anchor" href="#b-树的基本概念" aria-label="Permalink to &quot;B+树的基本概念&quot;">​</a></h4><p>一棵 m 阶 B+树应满足下列条件：</p><ul><li>每个分支结点最多有 m 棵子树(孩子结点)。</li><li>非叶根结点至少有两棵子树，其他每个分支结点至少有<code>m/2向上取整</code>棵子树。</li><li>结点的子树个数与关键字个数相等。</li><li>所有叶结点包含全部关键字及指向相应记录的指针，叶结点中将关键字按大小顺序排列，并且相邻叶结点按大小顺序相互链接起来(支持顺序查找)。</li><li>所有分支结点(可视为索引的索引)中仅包含它的各个子结点(即下一级的索引块)中关键字的最大值及指向其子结点的指针</li></ul><blockquote><p>B 树和 B+树的差异</p></blockquote><ul><li>在 B+树中，具有 n 个关键字的结点只含有 n 棵子树，即每个关键字对应 一棵子树;而在 B 树中，具有 n 个关键字的结点含有 n +1 棵子树。</li><li>在 B+树中，每个结点(非根内部结点)的关键字个数 n 的范围是「m/2 ≤n≤m(非叶根结点:2≤n≤m):而在 B 树中，每个结点(非根内部结点)的关键字个数 n 的范围是「m/2 -1 ≦ n ≦ m-1 (根结点：1≦ n≦ m-1)</li><li>在 B+树中，叶结点包含了全部关键字，非叶结点中出现的关键字也会出现在叶结点中;而 在 B 树中，最外层的终端结点包含的关键字和其他结点包含的关键字是不重复的。</li><li>在 B+树中，叶结点包含信息，所有非叶结点仅起索引作用，非叶结点的每个索引项只含有对应子树的最大关键字和指向该子树的指针，不含有对应记录的存储地址。这样能使一个磁盘块存储更多的关键字，使得磁盘读/写次数更少，查找速度更快。</li><li>在 B+树中，用一个指针指向关键字最小的叶结点，将所有叶结点串成一个线性链表。</li></ul><p><img src="'+_+'" alt="alt text"></p>',68),T=[C];function x(q,L,f,v,P,S){return a(),i("div",null,T)}const O=s(D,[["render",x]]);export{N as __pageData,O as default};
