import{_ as t,c as a,o,aa as r}from"./chunks/framework.CAVwB9kQ.js";const e="/Lyc-notes/assets/0117.EdzRgodI.png",u=JSON.parse('{"title":"JS代码是如何被解析执行的？","description":"","frontmatter":{},"headers":[],"relativePath":"Javascript/Advance/execution.md","filePath":"Javascript/Advance/execution.md","lastUpdated":1713883033000}'),s={name:"Javascript/Advance/execution.md"},i=r('<h1 id="js代码是如何被解析执行的" tabindex="-1">JS代码是如何被解析执行的？ <a class="header-anchor" href="#js代码是如何被解析执行的" aria-label="Permalink to &quot;JS代码是如何被解析执行的？&quot;">​</a></h1><h2 id="js引擎" tabindex="-1">JS引擎 <a class="header-anchor" href="#js引擎" aria-label="Permalink to &quot;JS引擎&quot;">​</a></h2><blockquote><p>虚拟机：一种特殊的软件，可以在计算机平台和终端用户之间创建一种环境，使得终端用户可以基于该软件所创建的环境来操作软件。有系统虚拟机和程序虚拟机之分：</p><ul><li>系统虚拟机 - 可以运行完整的操作系统，如 VMware</li><li>程序虚拟机 - 也叫进程虚拟机，支持单个进程，可以运行单个计算机程序，例如 Java 虚拟机</li></ul></blockquote><p><strong>定义：</strong> JS 引擎是一种虚拟机，是 JS 代码的运行环境，其作用就是将 JS 代码编译成机器可理解执行的机器代码，JavaScript解析引擎就是能够“读懂”JavaScript代码，并准确地给出代码运行结果的一段程序。比方说，当你写了 <code>var a = 1 + 1</code> 这样一段代码，JavaScript引擎做的事情就是看懂（解析）你这段代码，并且将a的值变为2。</p><h3 id="js引擎与渲染引擎" tabindex="-1">JS引擎与渲染引擎 <a class="header-anchor" href="#js引擎与渲染引擎" aria-label="Permalink to &quot;JS引擎与渲染引擎&quot;">​</a></h3><p>渲染引擎渲染页面，JS 引擎执行 JS 代码</p><ul><li>渲染引擎通过 JS 引擎提供的调用接口，使用 JS 引擎处理 JS 代码并获得结果</li><li>JS 引擎通过桥接接口访问或修改渲染引擎生成的 DOM 树</li></ul><p><img src="'+e+'" alt="alt text"></p><h2 id="阶段" tabindex="-1">阶段 <a class="header-anchor" href="#阶段" aria-label="Permalink to &quot;阶段&quot;">​</a></h2><blockquote><ol><li><strong>词法分析（Lexical Analysis）</strong></li></ol><p>JavaScript 引擎首先会对代码进行词法分析，将代码字符串分解成一个个的<strong>词法单元（Token）</strong>，比如关键字、标识符、运算符、分号等。</p><ol start="2"><li><strong>语法分析（Syntax Parsing）</strong></li></ol><p>在词法分析之后，引擎会将这些<strong>词法单元</strong>转换成一个个的语法结构，构建出<strong>抽象语法树（Abstract Syntax Tree，AST）</strong>。语法分析阶段会检查代码是否符合 JavaScript 的语法规范，并在此过程中进行语法错误的检测。</p><ol start="3"><li><strong>执行上下文创建（Execution Context Creation）</strong></li></ol><p>在代码执行之前，JavaScript 引擎会创建全局执行上下文，并将其推入执行上下文栈（Execution Context Stack）中。此后，每当函数被调用时，都会创建一个新的执行上下文，并被推入执行上下文栈的顶部。</p><ol start="4"><li><strong>执行代码</strong></li></ol><p>引擎会按照执行上下文栈的顺序逐个执行其中的代码。在执行过程中，会根据代码的类型执行不同的操作，比如声明变量、执行函数、计算表达式等。</p><ol start="5"><li><strong>变量和函数声明</strong></li></ol><p>在执行代码的过程中，JavaScript 引擎会将变量和函数的<strong>声明提升（Hoisting）</strong>，即在代码执行前先进行声明，但初始化留在原处。这意味着变量和函数可以在声明之前被使用，但如果初始化在声明之后，则会出现未定义的行为。</p><ol start="6"><li><strong>执行栈管理</strong></li></ol><p>在函数调用时，会创建对应的执行上下文，并将其推入执行上下文栈的顶部；当函数执行完毕或返回时，对应的执行上下文会被从栈顶弹出，控制权交还给上一个执行上下文。</p><ol start="7"><li><strong>内存管理</strong></li></ol><p>在代码执行过程中，JavaScript 引擎会负责对内存的管理，包括变量的分配、垃圾回收等操作，确保代码的正常执行和内存的有效利用。</p></blockquote>',10),n=[i];function l(c,p,d,S,g,J){return o(),a("div",null,n)}const h=t(s,[["render",l]]);export{u as __pageData,h as default};
