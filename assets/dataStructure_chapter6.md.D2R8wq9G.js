import{_ as s,c as t,o as n,aa as a}from"./chunks/framework.CAVwB9kQ.js";const i="/Lyc-notes/assets/%E6%9C%89%E5%90%91%E5%9B%BE_%E6%97%A0%E5%90%91%E5%9B%BE.BkOXb7UF.png",r="/Lyc-notes/assets/%E6%97%A0%E5%90%91%E5%9B%BE%E5%8F%8A%E5%85%B6%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F.BH37dORa.png",l="/Lyc-notes/assets/%E7%94%9F%E6%88%90%E6%A0%91.DuaAX9AF.png",e="/Lyc-notes/assets/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.D6HWnqP9.png",y=JSON.parse('{"title":"第 6 章 图","description":"","frontmatter":{},"headers":[],"relativePath":"dataStructure/chapter6.md","filePath":"dataStructure/chapter6.md","lastUpdated":1718552537000}'),p={name:"dataStructure/chapter6.md"},o=a('<h1 id="第-6-章-图" tabindex="-1">第 6 章 图 <a class="header-anchor" href="#第-6-章-图" aria-label="Permalink to &quot;第 6 章 图&quot;">​</a></h1><h2 id="图的基本概念" tabindex="-1">图的基本概念 <a class="header-anchor" href="#图的基本概念" aria-label="Permalink to &quot;图的基本概念&quot;">​</a></h2><h4 id="图的定义" tabindex="-1">图的定义 <a class="header-anchor" href="#图的定义" aria-label="Permalink to &quot;图的定义&quot;">​</a></h4><p>图 G 由项点集和边集 E 组成，记为 G=(V,E)</p><p>线性表可以是空表，树可以是空树，但图不可以是空图。也就是说，图中不能一个顶点 也没有，图的顶点集 V 一定非空，但边集 E 可以为空，此时图中只有顶点而没有边。</p><ol><li><p><strong>有向图</strong></p></li><li><p><strong>无向图</strong></p></li></ol><p><img src="'+i+'" alt="alt text"></p><ol start="3"><li><strong>简单图、多重图</strong></li></ol><p>一个图 G 若满足: 1️⃣ 不存在重复边; 2️⃣ 不存在顶点到自身的边，则称图 G 为简单图。图 6. 1 中 G1 和 G2 均内简单图</p><ol start="4"><li><strong>完全图（简单完全图）</strong></li></ol><p>对于无向图，|E|的取值范围为 0 到 n(n-1)/2，<strong>有 n(n-1)/2 条边的无向图称完全图</strong>，<strong>在完全图中任意两个项点之间都存在边</strong>。对于有向图，|E|的取值范围为 0 到 n(n-1)，<strong>有 n(n-1)条弧的有向图称为有向完全图</strong>，在有向完全图中任意两个顶点之间都存在方向相反的两条弧。图 6.1 中 G2 为无向完全图，而 G3 为有向完全图。</p><ol start="5"><li><p><strong>子图</strong></p><p>G3 为 G1 的子图</p></li><li><p><strong>连通、连通图和连通分量</strong></p></li></ol><p>在<strong>无向图</strong>中，若从顶点 v 到顶点 w 有路径存在，则称 v 和 w 是连通的。若图 G 中任意两个顶点都是连通的 ， 则称图 G 连通图，否则称非连通图。无向图中的极大连通子图称连通分量，在图 6.2(a)中，图 G4 有 3 个连通分量如图 6.2(b)所示。假设一个图有 n 个顶点，若边数小于 n-1，则此图必是非连通图;思考，若图是非连通图，则最多可以有多少条边?</p><p><img src="'+r+'" alt="alt text"></p><ol start="7"><li><strong>强连通图、强连通分量</strong></li></ol><p>在<strong>有向图</strong>中，若有一对顶点 w 和 w，从 v 到 w 和从 w 到 v 之间都有路径，则称这两个顶点是<strong>强连通</strong>的。<strong>若图中任意一对项点都是强连通的，则称此图为强连通图</strong>。<strong>有向图中的极大强连通子图称为有向图的强连通分量</strong>，图 G，的强连通分量如图 6.3 所示。思考，假设一个有向图有 n 个项点，若是强连通图，则最少需要有多少条边</p><ol start="8"><li><strong>生成树、生成森林</strong></li></ol><p>连通图的生成树是包含图中全部顶点的一个极小连通子图。若图中顶点数为 n，则它的生成树含有 n-1 条边。包含图中全部顶点的极小连通子图，只有生成树满足这个极小条件，对生成树而言，若砍去它的一条边，则会变成非连通图，若加上一条边则会形成一个回路。在非连通图中，连通分量的生成树构成了非连通图的生成森林。图 G 的一个生成树如图 6.4 所示。</p><p><img src="'+l+'" alt="alt text"></p><blockquote><p>区分极大连通子图和极小连通子图。极大连通子图要求子图必须连通，而且包含尽可能 多的顶点和边;极小连通子图是既要保持子图连通又要使得边数最少的子图</p></blockquote><ol start="9"><li><strong>顶点的度、入度和出度</strong></li></ol><p>在<strong>无向图</strong>中，顶点 v 的度是<strong>指依附于项点的边的条数</strong>，记为 TD(v)。在图 6.1(b)中，每个项点的度均为 3。<strong>无向图的全部顶点的度之和等于边数的 2 倍</strong>，因为每条边和两个项点相关联。 在<strong>有向图</strong>中，顶点 v 的度分为入度和出度，<strong>入度是以顶点终点的有向边的数目</strong>，记为 ID(1):而<strong>出度是以顶点，为起点的有向边的数目</strong>，记为 OD(v)。在图 6.1(a)中，顶点 2 的出度为 2、入度为 1。顶点 v 的度等于其<strong>入度与出度之和</strong>，即 TD(v)=ID(v)+OD(v)。<strong>有向图的全部顶点的入度之和与出度之和相等，并且等于边数，这是因为每条有向边都有一个起点和终点</strong>。</p><ol start="10"><li><strong>边的权和网</strong></li></ol><p>在一个图中，每条边都可以标上具有某种含义的数值，<strong>该数值称为该边的权值</strong>。这种边上 带有权值的图称为<strong>带权图，也称网</strong>。</p><ol start="11"><li><strong>稠密图、稀疏图</strong></li></ol><p>边数很少的图称为稀疏图，反之称为稠密图。稀疏和稠密本身是模糊的概念，稀疏图和稠 密图常常是相对而言的。一般当图 G 满足 E&lt;|7log|V 时，可以将 G 视为稀疏图。</p><ol start="12"><li><strong>路径、路径长度和回路</strong></li></ol><p>顶点 v，到顶点 1，之间的一条路径是指顶点序列 1pVV。，当然关联的边也可理解为路径的构成要素。路径上的边的数目称内<strong>路径长度</strong>。<strong>第一个顶点和最后一个项点相同的路径称为回路或环</strong>。若一个图有 n 个项点，且有大于 n-1 条边，则此图一定有环。</p><ol start="13"><li><strong>简单路径、简单回路</strong></li></ol><p>在路径序列中，顶点不重复出现的路径称为简单路径。除第一个顶点和最后一个顶点外， 其余顶点不重复出现的回路称为简单回路。</p><ol start="14"><li><strong>距离</strong></li></ol><p>从顶点 w 出发到顶点 v 的最短路径若存在，则此路径的长度称为从 u 到 v 的距离。若从 w 到 v 根本不存在路径，则记该距离为无穷(∞)</p><ol start="16"><li><strong>有向树</strong></li></ol><p>一个项点的入度为 0、其余顶点的入度均为 1 的有向图，称为有向树。</p><h2 id="图的存储及基本操作" tabindex="-1">图的存储及基本操作 <a class="header-anchor" href="#图的存储及基本操作" aria-label="Permalink to &quot;图的存储及基本操作&quot;">​</a></h2><h4 id="邻接矩阵法" tabindex="-1">邻接矩阵法 <a class="header-anchor" href="#邻接矩阵法" aria-label="Permalink to &quot;邻接矩阵法&quot;">​</a></h4><p>所谓邻接矩阵存储，是指用<strong>一个一维数组存储图中顶点的信息</strong>，<strong>用一个二维数组存储图中边的信息(即各顶点之间的邻接关系)</strong>，存储顶点之间邻接关系的二维数组称为邻接矩阵。</p><p>对带权图而言，若顶点 Vi 和 Vj 之间有边相连，则邻接矩阵中对应项存放着该边对应的权值，若顶点 Vi 和 Vj 不相连，则通常用 0 或 ∞ 来代表这两个项点之间不存在边。</p><p><img src="'+e+`" alt="alt text"></p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#deinfen MaxVertexNum </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  顶点数目的最大值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VertexType;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 顶点对应的数据类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EdgeType;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 边对应的数据类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   VertexType </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[MaxVertexNum];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 顶点表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   EdgeType </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">edge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[MaxVertexNum][MaxVertexNum];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 邻接矩阵、边表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vexnum,arcnum;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 图的当前顶点数和边数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}MGraph;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>1️⃣ 在简单应用中，可直接用二维数组作为图的邻接矩阵(顶点信息等均可省略)。 2️⃣ 当邻接矩阵的元素仅表示相应边是否存在时，EdgeType 可用值为 0 和 1 的枚举类型。 3️⃣ 无向图的邻接矩阵是对称矩阵，对规模特大的邻接矩阵可采用压缩存储。 4️⃣ 邻接矩阵表示法的空间复杂度为 O(n-)，其中 n 为图的顶点数|M。</p></blockquote><blockquote><p>邻接矩阵的遍历的时间复杂度</p></blockquote><p>图的邻接矩阵存储表示法具有以下特点:</p><p>1️⃣ <strong>无向图的邻接矩阵一定是一个对称矩阵(并且唯一)</strong>。因此，在实际存储邻接矩阵时只需存储上(或下)三角矩阵的元素。 2️⃣ 对于无向图，邻接矩阵的第 i 行(或第 i 列)非零元素(或非 ∞ 元素)的个数正好是顶点 i 的度 TD(v)。 3️⃣ 对于有向图，邻接矩阵的第 i 行非零元素(或非 ∞ 元素)的个数正好是顶点 i 的出度 OD(v)；第 i 列非零元素(或非 ∞ 元素)的个数正好是顶点 i 的入度 ID(Vi)； 4️⃣ 用邻接矩阵存储图，很容易确定图中任意两个项点之间是否有边相连。但是，要确定图中有多少条边，则必须按行、按列对每个元素进行检测，所花费的时间代价很大。 5️⃣ 稠密图(即边数较多的图)适合采用邻接矩阵的存储表示。 6️⃣ 设图 G 的邻接矩阵为 A，**A^n 的元素 A^n[j][j] 等于由顶点 i 到顶点 j 的长度为 n 的路径的数目 **</p>`,44),h=[o];function g(k,c,E,d,u,b){return n(),t("div",null,h)}const A=s(p,[["render",g]]);export{y as __pageData,A as default};
